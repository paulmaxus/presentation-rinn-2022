---
title: "Exploiting Power BI's scheduled refresh"
author: "Max Paulus, RI @ VU Amsterdam"
format: 
    revealjs:
            code-overflow: scroll
            logo: images/VU_logo_RGB-01.png
            incremental: true
---

## Our (semi-)automised workflow

- source: REST API
- writing Python scripts to extract/transform data
- output as (related) *.csv* tables
- load into Power BI as data source
- create visuals

## A fully automised workflow

Using workflow managers:

- e.g. Apache Airflow ![](images/graph.png)

<!--- Azure Data Factory & Blob (costs?) -->

## Overkill!

![](images/arch-diag-basic.png)

## Scheduled refresh

![](images/refresh.png)


## The data source: OpenAlex

- overview of data types

## API

- simplify: groupby
- or: pagination

## In Power BI

```{.dax}
GetOAStats = (year as text, rors as list) =>
        let
            BaseUrl = "https://api.openalex.org/works",
            vOptions = [Query=[filter="authorships.institutions.ror:" & Text.Combine(rors, "|") & ",publication_year:" & year, group_by="oa_status"]],
            Source = Json.Document(Web.Contents(BaseUrl, vOptions)),
            Table = Table.FromRecords({Source})
        in
            Table,
```

## The data source: Overton

- slow, solution: history of previous years

## In Power BI

- source1 (history): .csv (*https://vunl.sharepoint.com/sites/...*)
- source2 (current year): API 

```{.dax}
Source = Table.Combine({overton_hist, overton_current}),
#"Removed Duplicates" = Table.Distinct(Source, {"policy_document_id"}),
```

## Downsides

- no storage
- no Python

## Demo

- [embed PBI]
- alternative: link to .pdf on gh

## Questions?