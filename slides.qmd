---
title: "Exploiting Power BI's scheduled refresh"
author: "Max Paulus, RI@VU"
format: 
    revealjs:
        code-overflow: scroll
        logo: images/VU_logo_RGB-01.png
        incremental: true
        theme: default
        pdf-separate-fragments: true
---

## Three design principles

- **flexibility**: make dashboards as informative and interactive as possible so that users can explore the data and draw their own conclusions
- **purposeful design**: at the same time, select and tailor dataset and visuals to target a user's research questions
- **interpretation**: provide enough information to make the data interpretable with respect to those RQs


## Our (semi-)automised workflow  {visibility="hidden"}

<!-- 
Mermaid rendering cuts off some text.
We can render it externally and load the image:
https://mermaid.live
-->

```{mermaid}
flowchart TD
  A1[(Data)] -. API .-> B(extract/transform)
  A2[(Data)] -.-> B
  A3[(Data)] -.-> B
  B --> C(.csv)
  C -. Query .- D(Data model)
  subgraph Power BI
  D --> E(Visualisations)
  end
```

## Our (semi-)automised workflow

![](images/workflow.png)

## A fully automised workflow

*Apache Airflow, Prefect* etc.

![](images/graph.png)

---

![architecture](images/arch-diag-basic.png)

## A Power BI alternative

![](images/refresh.png)


## Data source 1: OpenAlex

![](images/openalex_entities.png)
<!--- entities: https://i.imgur.com/FXTji65.png -->

## API: *works* endpoint

parameters:

- filters: *ror*, *concept.id*, ...
- group_by: *oa_status*, *publication_year*, ...

::: {.fragment}
<!-- ![](images/oa_status.png) -->
<img src="images/oa_status.png" height="350"/>
:::

## M

```{.dax}
GetOAStats = (year as text, rors as list) =>
        let
            BaseUrl = "https://api.openalex.org/works",
            vOptions = [Query=[filter="authorships.institutions.ror:" & Text.Combine(rors, "|") & ",publication_year:" & year, group_by="oa_status"]],
            Source = Json.Document(Web.Contents(BaseUrl, vOptions)),
            Table = Table.FromRecords({Source})
        in
            Table,
```

## Data model

![](images/data_model.png)

## Data source 2: Overton

![](images/overton.png)

::: {.fragment}
issue: rate limits

- possible solution: __snapshots__
:::

## M

- source1 (history): snapshot of previous years (*https://vunl.sharepoint.com/sites/...*)

- source2 (current): policy documents from current year (API)

. . .

```{.dax}
Source = Table.Combine({overton_hist, overton_current}),
#"Removed Duplicates" = Table.Distinct(Source, {"policy_document_id"}),
```

## Flexible & Customisable

- Data model provides many ways to explore the dataset
- We can create custom dashboards linked to the same underlying dataset ![](images/pbi_lineage.png)

## Downsides

- inefficient (data is overwritten every time)
- Python scripts only available when using a gateway
- however: public reports can't run Python scripts anyways
- <https://realpython.com/power-bi-python/>

## Open data &rarr; Open RI

- sharing ideas, methods, code
- sharing infrastructure, e.g. Airflow instance
- sharing data

## Demo

<iframe title="oa_daily" width="1024" height="1060" src="https://app.powerbi.com/view?r=eyJrIjoiODBhY2NjNDAtZDI5ZC00NWU2LTg0NDAtZDgzNGQ4NDk3MDM1IiwidCI6IjQ2MmE5YzljLTJkYTYtNGJmYi1iMzE4LTBmODMwNDNmZTQ5YiIsImMiOjh9&pageName=ReportSection4805b74ddd2ca2701890" frameborder="0" allowFullScreen="true"></iframe>
